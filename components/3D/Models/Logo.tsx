/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 ./public/3d/logo.gltf -t 
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import gsap, { Expo, Power4 } from "gsap";

type GLTFResult = GLTF & {
  nodes: {
    Text002: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshPhysicalMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/3d/logo.gltf") as GLTFResult;
  const groupRef = useRef<THREE.Group>(null);
  // nodes.Text002.scale.set(0, 0, 0);
  // nodes.Text002.rotation.set(0, 0, 0);
  useEffect(() => {
    if (groupRef.current) {
      gsap.to(groupRef.current.scale, {
        x: 1,
        y: 1,
        z: 1,
        ease: Power4.easeOut,
        duration: 3,
      });
      gsap.to(groupRef.current.rotation, {
        z: Math.PI * 2,
        ease: Expo.easeOut,
        duration: 4,
      });
    }
  }, []);
  return (
    <group
      scale={[0, 0, 0]}
      rotation={[0, 0, 0]}
      ref={groupRef}
      {...props}
      dispose={null}
    >
      <mesh geometry={nodes.Text002.geometry}>
        <meshStandardMaterial
          color={"#6f35bd"}
          roughness={0.1}
          metalness={0.9}
          // roughness={0.31}
          // metalness={0.41}
        ></meshStandardMaterial>
      </mesh>
    </group>
  );
}

useGLTF.preload("/3d/logo.gltf");
