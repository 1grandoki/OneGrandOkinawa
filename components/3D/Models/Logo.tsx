/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 ./public/3d/logo.gltf -t 
*/

import * as THREE from "three";
import React, { useEffect, useLayoutEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import gsap, { Expo, Power4 } from "gsap";
import { ScrollTrigger } from "gsap/all";
import { Power0 } from "gsap";
import { Power2 } from "gsap";

type GLTFResult = GLTF & {
  nodes: {
    Text004: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshPhysicalMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements["mesh"]>
>;
type Props = {
  scaleV: number;
} & JSX.IntrinsicElements["group"];
export function Logo({ scaleV, ...props }: Props) {
  const { nodes, materials } = useGLTF("/3d/logo2.gltf") as GLTFResult;
  const groupRef = useRef<THREE.Group>(null);
  useEffect(() => {
    if (groupRef.current) {
      gsap.to(groupRef.current.scale, {
        x: scaleV,
        y: scaleV,
        z: scaleV,
        ease: Power4.easeOut,
        duration: 3,
      });
      gsap.to(groupRef.current.rotation, {
        z: Math.PI * 2,
        ease: Expo.easeOut,
        duration: 4,
      });
    }
  }, []);

  useLayoutEffect(() => {
    gsap.registerPlugin(ScrollTrigger);
    const ctx = gsap.context((self) => {
      if (groupRef.current)
        gsap.to(groupRef.current.rotation, {
          z: Math.PI,
          duration: 5,
          ease: Power2.easeInOut,
          onUpdate: () => {},
          scrollTrigger: {
            trigger: document.documentElement,
            start: "top top",
            end: "bottom bottom",
            scrub: 1,
          },
        });
    });
    return () => ctx.revert();
  }, []);
  // Change animation when the index changes
  return (
    <group
      scale={[0, 0, 0]}
      rotation={[0, 0, 0]}
      ref={groupRef}
      {...props}
      dispose={null}
    >
      <mesh geometry={nodes.Text004.geometry}>
        <meshStandardMaterial
          color={"#acfcca"}
          roughness={0.1}
          metalness={0.9}
        ></meshStandardMaterial>
      </mesh>
      <mesh position={[0.2, 0, 0.35]}>
        <boxGeometry args={[5.8, 0.2, 0.05]}></boxGeometry>
        <meshStandardMaterial
          color={"#acfcca"}
          roughness={0.1}
          metalness={0.9}
        ></meshStandardMaterial>
      </mesh>
    </group>
  );
}

useGLTF.preload("/3d/logo2.gltf");
